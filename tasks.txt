Join
----


Final Tasks
-----------
  - rename events methods and outputs: onUpdateTask --> onTaskUpdate ... !!!!!
  - subscribe user with login ... !!!!!
  - init user data only on reload (subscribed) ... !!!!!
  - save user data only online ... ?????
  - @returns A boolean value ... (without dash "-")

  - prepare a GlobalFunctionService ... !!!
  - Set onFunction() ...
  - delete not used events ... !
  - ValClass as ValServices ... ?
  - other classes as services ... ?
  - value != null --> null (false) ... !

  - delete InputComponent ... !
  - keep or delete SuperInputComponent + rename to InputComponent ... ?
  - remove ValidationService ... !

  - think about isValueVerified() or getVerifiedValue()!!!
  - think about any type (input classes and input services)!!!

  - app log (global log) instead of component log?!

  - remove event parameters which are not read ...
  - remove dash after returns ...

  - add user greetings ... (1/?)
  - limit for assigned contacts ... ?
  - limit for subtasks ... ?
  - replace SessionId with identify.ts ...
  
  - remove PrioButtonComponent ... ? (to less code)
  - add SubtaskComponent ... ? (to much code)
  - optional: input border color transition?


Completed (0/?)
---------
  - LoginComponent ... *review methods
  - SignUpComponent ... *review methods


Complete (1/?)
--------

components (4/?)
----------
  - DialogComponent - ... (1/?)
      - AddTaskDialogComponent - check
  - LoginComponent - check
  - NewPasswordComponent - check
  - SignUpComponent - check
  - SummaryComponent - check
      - SumCardComponent - check
  - AddTaskComponent - check* *How many child components?
      - AssignableContactComponent - check
      - TitleInputComponent - check
      - DescriptionInputComponent - check
      - AssignedToInputComponent - check
      - DueDateInputComponent - check
      - PrioInputComponent - check
      - CategoryInputComponent - check
  - BoardComponent - ... (1/?)
      - DraggableTaskComponent - check

shared/components (17/?)
-----------------
  - Button - check
  - CheckboxComponent - check
  - HeaderComponent - check
  - HintComponent - check
  - InputComponent - ... (necessary???)
  - JoinHeaderComponent - check
  - JoinTitleComponent - check
  - LabelComponent - check
  - LogComponent - check
  - LogoComponent - check
  - MainLinkComponent - check
  - MenuComponent - check
  - PasswordInputComponent - check
  - PrioButtonComponent - check
  - TextInputComponent - check
  - TitleComponent - check
  - SumCardComponent - check

shared/interfaces (12/?)
-----------------
  - ButtonData - check
  - CharCodeGroup - check
  - checkItem - ... (necessary???)
  - ContactData - check
  - Converter - check
  - DateData - check
  - MainLink - check
  - Model - check
  - Properties - check
  - Simple - check
  - Styles - check
  - States - check
  - SummaryTaskData - check

shared/models (9/?)
-------------
  - BasicInput - check
  - Contact - check
  - PasswordInput - check
  - SessionId - ... --> delete!!!
  - Subtask - check
  - Summary - check
  - SummaryTask - check
  - Task - check
  - Transform - check
  - User - check

shared/services (11/?)
---------------
  - DialogService - check* --> more dialogs?!
  - EmailValidationService - check
  - InputConfigurationService - check
  - InputValidationService - check
  - LogService - check
  - NameValidationService - check
  - NavigationService - check
  - PasswordMaskService - check
  - PasswordValidationService - check
  - SessionIdService - check
  - SummaryService - check

shared/ts (2/?)
---------
  - global.ts - check --> rename?
  - identify.ts - check


  --> input   // width: 422px / 440px / 456px!!!



--> Review Templates and Styles ... (0/2)
--> Review components, classes, interfces, services ... (0/4)

Review Models (1/? prepared)
-------------
  - user ... prepared

Review Services (2/? prepared - 2/? good)
  - join ... prepared - good
  - user ... prepared - good



html
----
<input
  type="password"
  (contextmenu)="preventCopyPaste($event)"
  (copy)="preventCopyPaste($event)"
  (cut)="preventCopyPaste($event)"
  (paste)="preventCopyPaste($event)"
  placeholder="Enter your password"
/>

ts
--
preventCopyPaste(event: Event): void {
  event.preventDefault();
}


sortContacts() {
    let filteredNames = this.assignedContacts.map((c) => c.name);
    console.log('filtered names: ', filteredNames);
    let sortedNames = filteredNames.sort();
    console.log('sorted names: ', sortedNames);

    let sortedContacts: Contact[] = [];
    sortedNames.forEach((name) => {
      let contact = this.assignedContacts.find((c) => c.name === name);
      if (contact) {
        sortedContacts.push(contact);
      }
    });
    console.log('sorted contacts: ', sortedContacts);

    this.assignedContacts = [];
    this.assignedContacts.push(...sortedContacts);

    this.assignedToChange.emit(this.assignedContacts);
}

Date Test
---------
    // let date = new Date();
    // console.log('date: ', date);
    // // to string
    // console.log('date to date string: ', date.toDateString());
    // console.log('date to ISO string: ', date.toISOString());
    // console.log('date to json: ', date.toJSON());
    // console.log('date to locale date string: ', date.toLocaleDateString());
    // console.log('date to locale time string: ', date.toLocaleTimeString());
    // console.log('date to string: ', date.toString());
    // console.log('date to time string: ', date.toTimeString());
    // console.log('date to UTC string: ', date.toUTCString());
    // // get
    // console.log('date get date: ', date.getDate());
    // console.log('date get day: ', date.getDay());
    // console.log('date get full year: ', date.getFullYear());
    // console.log('date get hours: ', date.getHours());
    // console.log('date get ms: ', date.getMilliseconds());
    // console.log('date get min: ', date.getMinutes());
    // console.log('date get month: ', date.getMonth());
    // console.log('date get sec: ', date.getSeconds());
    // console.log('date get time: ', date.getTime());
    // console.log('date get tz offset: ', date.getTimezoneOffset());
    // console.log('date get utc date: ', date.getUTCDate());
    // console.log('date get utc day: ', date.getUTCDay());
    // console.log('date get utc full year: ', date.getUTCFullYear());
    // console.log('date get utc hours: ', date.getUTCHours());
    // console.log('date get utc ms: ', date.getUTCMilliseconds());
    // console.log('date get utc min: ', date.getUTCMinutes());
    // console.log('date get utc month: ', date.getUTCMonth());
    // console.log('date get utc sec: ', date.getUTCSeconds());
    // // create again
    // console.log('date again: ', new Date(date.getTime()));


// drag events (7/7)
  // -----------
  // drag --> element is being dragged (nx) - no
  // dragstart --> on dragging (1x) - yes (card style)
  // dragleave --> on drop target left (tx) - maybe (column style)
  // dragenter --> on drop target entered (tx) - maybe (column style)
  // dragover --> over valid drop target (nx) - no
  // dragend --> on dragend (1x) - yes (card style)
  // drop --> on drop (1x) - yes (card style)