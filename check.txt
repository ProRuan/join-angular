Final Tasks
-----------
  - /assets/img/input/...
  - /assets/img/button/...
  - rename + move validate.ts ... ?
  - Class/Interface/Service/Component representing ...
  - private functions ... !
  - Bonus: Alias ... ?
  - documentate fn: return value ...

// NameInputComponent
// ------------------
// mixins.scss + inputs.scss
// onValueChange()
// is import of mixins still necessary???
// global mixins
// global img-32
// global input (move)
// folder input/buttons

// EmailInputComponent
// -------------------
// this.type ...
// check type="email" ...
// validateName() + validateEmail() ...
// TextInputComponent ... ?!
// double html and scss ...
// h-70 and h-48 necessary ... ?

Final Check
-----------
  - LoginComponent (html, scss, ts) ... (0/3)


Components (2/?)
----------
  - inputs (1/?)
    ------
      - PasswordInputComponent ...
      - TextInputComponent - check
  - LogoComponent - check
    -------------
      - Relocation - check
      - Reveletion - check


Interfaces (4/?)
----------
  - InputConfig - check
  - Propertiess - check
  - States - check
  - Styles - check

Models (2/?)
------
  - InputValidator - check *error { key: key, value: value }
  - ReactiveInput ... *class representing ...
  - Transform - check


Services
      

ts (1/?)
--
  - validate.ts - check



<form [formGroup]="signUpForm" (submit)="logName()">
            <app-name-input [control]="signUpForm.get('name')"></app-name-input>
            <app-email-input [control]="signUpForm.get('email')"></app-email-input>
            <app-password-input [control]="signUpForm.get('password')"></app-password-input>
            <button>Submit</button>
        </form>

emailConfig = {
    placeholder: 'Email',
    img: 'email',
    inputValidators: [
      this.validator.required(),
      this.validator.forbidden(emailPatterns.forbidden),
      this.validator.minLength(6),
      this.validator.email(emailPatterns.email),
      this.validator.maxLength(127),
    ],
  };
